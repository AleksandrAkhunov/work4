{3,
{42,0,0,0,0,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,1,0,
{0,0,0},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},1,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},1,"ПроверкаКоличестваЭлементов",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",2,0,1,
{10,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПроверкаКоличестваЭлементовРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,1,0},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,0,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",0,0,0,0,0,0,3,3,0,0,0},"//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВСправочникеНетЭлементаСНаименованием(Парам01)"",""ВСправочникеНетЭлементаСНаименованием"",""Допустим в справочнике нет элемента с наименованием """"контрагент2"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""СоздаемЭлементСправочникаСНаименованием(Парам01)"",""СоздаемЭлементСправочникаСНаименованием"",""Когда создаем элемент справочника с наименованием """"Контрагент2"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ЕстьЭлементСправочникаСНаименованием(Парам01)"",""ЕстьЭлементСправочникаСНаименованием"",""Тогда есть элемент справочника с наименованием """"Контрагент2"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ПереименовываемЭлементСправочникаСНаименованиемВ(Парам01,Парам02)"",""ПереименовываемЭлементСправочникаСНаименованиемВ"",""Когда переименовываем элемент справочника с наименованием """"Контрагент2"""" в """"Контрагент1"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВСправочникеЭлементовСНаименованиемБольше(Парам01,Парам02)"",""ВСправочникеЭлементовСНаименованиемБольше"",""Допустим в справочнике элементов с наименованием """"Контрагент1"""" больше 3"");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""УдаляемВсеЭлементыСНаименованием(Парам01)"",""УдаляемВсеЭлементыСНаименованием"",""Когда удаляем все элементы с наименованием """"Контрагент1"""""");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,""ВСправочникеНетЭлементовСНаименованием(Парам01)"",""ВСправочникеНетЭлементовСНаименованием"",""Тогда в справочнике нет элементов с наименованием """"Контрагент1"""""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение(""Объект"");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Допустим в справочнике нет элемента с наименованием ""контрагент2""
//@ВСправочникеНетЭлементаСНаименованием(Парам01)
Процедура ВСправочникеНетЭлементаСНаименованием(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Если ЕстьЭлементСНаименованием(Парам01) Тогда
		ВызватьИсключение ""В справочнике контрагенты есть элемент с наименованием "" + парам01;
	КонецЕсли;
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Тогда создаем элемент справочника с наименованием ""Контрагент2""
//@СоздаемЭлементСправочникаСНаименованием(Парам01)
Процедура СоздаемЭлементСправочникаСНаименованием(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	СоздатьЭлементСправочникаСНаименованием(Парам01);
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//ТОгда переименовываем элемент справочника с наименованием ""Контрагент"" в ""Контрагент1""
//@ПереименовываемЭлементСправочникаСНаименованиемВ(Парам01,Парам02)
Процедура ПереименовываемЭлементСправочникаСНаименованиемВ(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	ПереименоватьЭлементСправочника(Парам01, Парам02);
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

//окончание текста модуля

&НаКлиенте
//Тогда есть элемент справочника с наименованием ""Контрагент2""
//@ЕстьЭлементСправочникаСНаименованием(Парам01)
Процедура ЕстьЭлементСправочникаСНаименованием(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Если НЕ ЕстьЭлементСНаименованием(Парам01) Тогда
		ВызватьИсключение ""В справочнике контрагенты есть элемент с наименованием "" + парам01;
	КонецЕсли;
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Допустим в справочнике элементов с наименованием ""Контрагент1"" больше 3
//@ВСправочникеЭлементовСНаименованиемБольше(Парам01,Парам02)
Процедура ВСправочникеЭлементовСНаименованиемБольше(Парам01,Парам02) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Если КоличествоЭлементовСНаименованием(Парам01) <= Число(Парам02) Тогда
		ВызватьИсключение ""Количество элементов с наименованием ""+ Парам01  + "" не больше "" + Парам02;
	КонецЕсли;
		
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Когда удаляем все элементы с наименованием ""Контрагент1""
//@УдаляемВсеЭлементыСНаименованием(Парам01)
Процедура УдаляемВсеЭлементыСНаименованием(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	УдалитьВсеЭлементыСНаименованием(Парам01);
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
//Тогда в справочнике нет элементов с наименованием ""Контрагент1""
//@ВСправочникеНетЭлементовСНаименованием(Парам01)
Процедура ВСправочникеНетЭлементовСНаименованием(Парам01) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	Если КоличествоЭлементовСНаименованием(Парам01) > 0 Тогда
		ВызватьИсключение ""В справочнике контрагенты есть элементы с наименованием "" + парам01;
	КонецЕсли;
//	ВызватьИсключение ""Не реализовано."";
КонецПроцедуры

&НаКлиенте
Функция ЕстьЭлементСНаименованием(НаименованиеЭлемента)
Перем ОкноПриложенияКонтрагентыФормаКонтрагенты;
	ТаблицаСписок = ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты);
	ТаблицаСписок.ПерейтиКПервойСтроке();
	ОписаниеОтбора = Новый Соответствие();
	ОписаниеОтбора.Вставить(""Наименование"", НаименованиеЭлемента);
	СтрокаНайдена = ТаблицаСписок.ПерейтиКСтроке(ОписаниеОтбора, Вычислить(""НаправлениеПереходаКСтроке.Вниз""));
	Возврат СтрокаНайдена;
КонецФункции

&НаКлиенте
Функция КоличествоЭлементовСНаименованием(НаименованиеЭлемента)
Перем ОкноПриложенияКонтрагентыФормаКонтрагенты;
	ТаблицаСписок = ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты);
	ТаблицаСписок.ВыделитьВсеСтроки();
	МассивСтрок = ТаблицаСписок.ПолучитьВыделенныеСтроки();
	КоличествоЭлементов = 0;
	Для Каждого СтрокаТаблицы ИЗ МассивСтрок Цикл
		Если СтрокаТаблицы.Получить(""Наименование"") = НаименованиеЭлемента Тогда
			КоличествоЭлементов = КоличествоЭлементов + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат КоличествоЭлементов;
КонецФункции

&НаКлиенте
Процедура ПереименоватьЭлементСправочника(НаименованиеДо, НаименованиеПосле)
Перем ОкноПриложенияКонтрагентыФормаКонтрагенты;
	ТаблицаСписок = ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты);
	ТаблицаСписок.ПерейтиКПервойСтроке();
	Отбор = Новый Соответствие();
	Отбор.Вставить(""Наименование"", НаименованиеДо);
	СтрокаНайдена = ТаблицаСписок.ПерейтиКСтроке(Отбор, Вычислить(""НаправлениеПереходаКСтроке.Вниз""));
	Если НЕ СтрокаНайдена Тогда
		ВызватьИсключение ""Контрагент с наименованием "" + НаименованиеДо +"" не найден"";
	КонецЕсли;
	КнопкаИзменить = ОкноПриложенияКонтрагентыФормаКонтрагенты.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), ""Изменить"", ""СписокКонтекстноеМенюИзменить"");
	КнопкаИзменить.Нажать();
	ОкноПриложенияКонтрагент1Контрагенты = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), НаименованиеДо + "" (Контрагенты)"", , 30);
	ОкноПриложенияКонтрагент1КонтрагентыФормаКонтрагент1Контрагенты = ОкноПриложенияКонтрагент1Контрагенты.НайтиОбъект(Тип(""ТестируемаяФорма""), НаименованиеДо + "" (Контрагенты)"");
	ПолеНаименование = ОкноПриложенияКонтрагент1КонтрагентыФормаКонтрагент1Контрагенты.НайтиОбъект(Тип(""ТестируемоеПолеФормы""), ""Наименование"", ""Наименование"");
	ПолеНаименование.ВвестиТекст(НаименованиеПосле);
	КнопкаЗаписатьИЗакрыть = ОкноПриложенияКонтрагент1КонтрагентыФормаКонтрагент1Контрагенты.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), ""Записать и закрыть"", ""ФормаЗаписатьИЗакрыть"");
	КнопкаЗаписатьИЗакрыть.Нажать();

КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеЭлементыСНаименованием(НаименованиеЭлемента)
Перем ОкноПриложенияКонтрагентыФормаКонтрагенты;
	ТаблицаСписок = ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты);
	СтрокаНайдена = Истина;
	Пока Истина Цикл
		ТаблицаСписок.ПерейтиКПервойСтроке();
		Отбор = Новый Соответствие();
		Отбор.Вставить(""Наименование"", НаименованиеЭлемента);
		СтрокаНайдена = ТаблицаСписок.ПерейтиКСтроке(Отбор, Вычислить(""НаправлениеПереходаКСтроке.Вниз""));
		Если НЕ СтрокаНайдена Тогда
			Прервать;
		КонецЕсли;
		ТаблицаСписок.УдалитьСтроку();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлементСправочникаСНаименованием(НаименованиеЭлемента)
Перем ОкноПриложенияКонтрагентыФормаКонтрагенты;
	ТаблицаСписок = ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты);
	КнопкаСоздать = ОкноПриложенияКонтрагентыФормаКонтрагенты.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), ""Создать"", ""ФормаСоздать"");
	КнопкаСоздать.Нажать();
	
	ОкноПриложенияКонтрагентыСоздание = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Контрагенты (создание)"", , 30);
	ОкноПриложенияКонтрагентыСозданиеФормаКонтрагентыСоздание = ОкноПриложенияКонтрагентыСоздание.НайтиОбъект(Тип(""ТестируемаяФорма""), ""Контрагенты (создание)"");
	
	ПолеНаименование = ОкноПриложенияКонтрагентыСозданиеФормаКонтрагентыСоздание.НайтиОбъект(Тип(""ТестируемоеПолеФормы""), ""Наименование"", ""Наименование"");
	ПолеНаименование.ВвестиТекст(НаименованиеЭлемента);
	
	КнопкаЗаписатьИЗакрыть = ОкноПриложенияКонтрагентыСозданиеФормаКонтрагентыСоздание.НайтиОбъект(Тип(""ТестируемаяКнопкаФормы""), ""Записать и закрыть"", ""ФормаЗаписатьИЗакрыть"");
	КнопкаЗаписатьИЗакрыть.Нажать();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКоличестваЭлементов(Команда)
	ВСправочникеЭлементовСНаименованиемБольше(""Контрагент1"",""3"");
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьСписокКонтрагентов(ОкноПриложенияКонтрагентыФормаКонтрагенты)
	ЗакрытьВсеОкнаКлиентскогоПриложения();
	ОткрытьСписокКонтрагентов();
	ОкноПриложенияКонтрагенты = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""), ""Контрагенты"", , 30);
	ОкноПриложенияКонтрагентыФормаКонтрагенты = ОкноПриложенияКонтрагенты.НайтиОбъект(Тип(""ТестируемаяФорма""), ""Контрагенты"");
	ТаблицаСписок = ОкноПриложенияКонтрагентыФормаКонтрагенты.НайтиОбъект(Тип(""ТестируемаяТаблицаФормы""), ""Список"", ""Список"");
	Возврат ТаблицаСписок;
КонецФункции

&НаКлиенте
Процедура ЗакрытьВсеОкнаКлиентскогоПриложения()
	ЯЗакрылВсеОкнаКлиентскогоПриложения();
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьСписокКонтрагентов()
	ОкноПриложенияОсновное = Неопределено;
	КлиентсткиеОкнаТестируемогоПриложения = КонтекстСохраняемый.ТестовоеПриложение.ПолучитьПодчиненныеОбъекты();
	Для Каждого ТестируемоеОкно Из КлиентсткиеОкнаТестируемогоПриложения Цикл
		Если ТестируемоеОкно.Основное Тогда
			ОкноПриложенияОсновное = ТестируемоеОкно;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОкноПриложенияОсновноеCommandInterface = ОкноПриложенияОсновное.ПолучитьКомандныйИнтерфейс();
	
	КнопкаКомандногоИнтерфейсаПродажа = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса""), ""Продажа"");
	КнопкаКомандногоИнтерфейсаПродажа.Нажать();

	КнопкаКомандногоИнтерфейсаКонтрагенты = ОкноПриложенияОсновноеCommandInterface.НайтиОбъект(Тип(""ТестируемаяКнопкаКомандногоИнтерфейса""), ""Контрагенты"");
	КнопкаКомандногоИнтерфейсаКонтрагенты.Нажать();
КонецПроцедуры

&НаКлиенте
Процедура ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть()
	Нашли = Ложь;
	ОкноПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъект(Тип(""ТестируемоеОкноКлиентскогоПриложения""),""1С:Предприятие"",,1);
	Если ОкноПриложения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивКнопок = ОкноПриложения.НайтиОбъекты(Тип(""ТестируемаяКнопкаФормы""));
	Для Каждого Кнопка Из МассивКнопок Цикл
		Если НРег(Кнопка.ТекстЗаголовка) = ""нет"" Тогда
			Кнопка.Нажать();
			Возврат;
		ИначеЕсли ВРег(Кнопка.ТекстЗаголовка) = ""OK"" Тогда
			Кнопка.Нажать();
			Возврат;
		КонецЕсли;	 
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
//Я закрыл все окна клиентского приложения
//@ЯЗакрылВсеОкнаКлиентскогоПриложения()
Процедура ЯЗакрылВсеОкнаКлиентскогоПриложения() Экспорт
	ОкнаПриложения = КонтекстСохраняемый.ТестовоеПриложение.НайтиОбъекты(Тип(""ТестируемоеОкноКлиентскогоПриложения""));
	
	ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог остаться от предыдущего сценария
	
	Для каждого ОкноПриложение Из ОкнаПриложения Цикл
		Если ОкноПриложение.Основное Тогда
			Продолжить;
		КонецЕсли;	 
		
		Если ОкноПриложение.НачальнаяСтраница Тогда
			Продолжить;
		КонецЕсли;	 
		
		Попытка
			ОкноПриложение.Закрыть();
		Исключение
			Сообщить(""Не смог закрыть окно "" + ОкноПриложение);
			Продолжить;
		КонецПопытки;
		
		ЕслиНаЭкранеДиалогМодальныйДиалогТоНадоЕгоЗакрыть();//диалог мог появиться при закрытии окна.
		
	КонецЦикла;
	
	
КонецПроцедуры
",
{4,1,
{9,
{1},0,"Объект",
{1,0},
{"Pattern",
{"#",1fa267af-3d54-4f70-ac00-718486d7aafd}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},1,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiLz4=}
},
{0,0},
{0,1,
{7,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"ПроверкаКоличестваЭлементов",
{1,1,
{"ru","Проверка количества элементов"}
},
{1,1,
{"ru","Проверка количества элементов"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ПроверкаКоличестваЭлементов",3,0,0,
{0,0},1,0}
},
{0,0},
{0,0},0,0}